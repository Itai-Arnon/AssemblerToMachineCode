const char *opcode_names[16][3][1] = {
		{{"mov"}, {"_123"}, {"0123"}},
		{{"cmp"}, {"0123"}, {"0123"}},
		{{"add"}, {"_123"}, {"0123"}},
		{{"sub"}, {"_123"}, {"0123"}},
		{{"lea"}, {"_123"}, {"_1__"}},
		{{"clr"}, {"_123"}, {"____"}},
		{{"not"}, {"_123"}, {"____"}},
		{{"inc"}, {"_123"}, {"____"}},
		{{"dec"}, {"_123"}, {"____"}},
		{{"jmp"}, {"_12_"}, {"____"}},
		{{"bne"}, {"_12_"}, {"____"}},
		{{"red"}, {"_123"}, {"____"}},
		{{"prn"}, {"0123"}, {"____"}},
		{{"jsr"}, {"_12_"}, {"____"}},
		{{"rts"}, {"____"}, {"____"}},
		{{"stop"}, {"____"}, {"____"}}
};

void initParserStruct()
{
	memset(parser.err_buff, 0, sizeof(parser.err_buff));

	parser.oper = ERROR_OPER;

	parser.param.sets[0] = (set*)malloc(sizeof(set));
	parser.param.sets[1] = (set*)malloc(sizeof(set));
	parser.param.sets[2] = (set*)malloc(sizeof(set));

void ret_next_word(char line_text[], int *offset, char line[], char separators[], int separators_amount);
void jump_spaces_and_tabs(int *offset, char line[]);

void jump_spaces_and_tabs(int *offset, char line[]) {
	while (line[*offset] == ' ' || line[*offset] == '\t')
		(*offset)++;
}
void ret_next_word(char line_text[], int *offset, char line[], char separators[], int separators_amount){
	int i = 0;

	while (is_char_separator(line[i+*offset], separators, separators_amount)==0) {
		line_text[i] = line[i+*offset];
		i++;
	}

	line_text[i] = '\0';
	*offset += i;
}

void ret_next_word_n_skip(char line_text[], int *offset, char line[], char separators[], int separators_amount){
	jump_spaces_and_tabs(offset, line);
	ret_next_word(line_text, offset, line, separators, separators_amount);
	jump_spaces_and_tabs(offset, line);
}