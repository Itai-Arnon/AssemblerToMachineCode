
/*******************************************************/
#define BADKEY -1
#define A1 1
#define A2 2
#define B1 3
#define B2 4

typedef struct { char *key; int val; } t_symstruct;

static t_symstruct lookuptable[] = {
    { "A1", A1 }, { "A2", A2 }, { "B1", B1 }, { "B2", B2 }
};

#define NKEYS (sizeof(lookuptable)/sizeof(t_symstruct))

int keyfromstring(char *key)
{
    int i;
    for (i=0; i < NKEYS; i++) {
        t_symstruct *sym = lookuptable[i];
        if (strcmp(sym->key, key) == 0)
            return sym->val;
    }
    return BADKEY;
}

/* ... */
switch (keyfromstring(somestring)) {
case A1: /* ... */ break;
case A2: /* ... */ break;
case B1: /* ... */ break;
case B2: /* ... */ break;
case BADKEY: /* handle failed lookup */
}
/******************************************************/

void initParserStruct()
{
	memset(parser.err_buff, 0, sizeof(parser.err_buff));

	parser.oper = ERROR_OPER;

	parser.param.sets[0] = (set*)malloc(sizeof(set));
	parser.param.sets[1] = (set*)malloc(sizeof(set));
	parser.param.sets[2] = (set*)malloc(sizeof(set));

void ret_next_word(char line_text[], int *offset, char line[], char separators[], int separators_amount);
void jump_spaces_and_tabs(int *offset, char line[]);

void jump_spaces_and_tabs(int *offset, char line[]) {
	while (line[*offset] == ' ' || line[*offset] == '\t')
		(*offset)++;
}
void ret_next_word(char line_text[], int *offset, char line[], char separators[], int separators_amount){
	int i = 0;

	while (is_char_separator(line[i+*offset], separators, separators_amount)==0) {
		line_text[i] = line[i+*offset];
		i++;
	}

	line_text[i] = '\0';
	*offset += i;
}

void ret_next_word_n_skip(char line_text[], int *offset, char line[], char separators[], int separators_amount){
	jump_spaces_and_tabs(offset, line);
	ret_next_word(line_text, offset, line, separators, separators_amount);
	jump_spaces_and_tabs(offset, line);
}